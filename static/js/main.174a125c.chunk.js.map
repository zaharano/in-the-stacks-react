{"version":3,"sources":["Modal.js","AddBookForm.js","BookCard.js","LibFind.js","App.js","serviceWorker.js","index.js"],"names":["Modal","showHideClass","this","props","show","className","children","Component","AddBookForm","state","title","author","numPages","read","handleSubmit","e","preventDefault","add","setState","close","handleCancel","handleChange","target","name","value","handleReadChange","id","type","placeholder","required","onChange","htmlFor","checked","onClick","BookCard","handleEx","remove","handleToggle","toggle","readPrint","lib","localStorage","getItem","JSON","parse","uuidv4","App","showForm","library","myLibrary","addBook","book","concat","setTimeout","libUpdate","removeBook","entries","i","console","log","slice","toggleRead","st","map","setItem","stringify","showModal","hideModal","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.174a125c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n  render() {\n    const showHideClass = this.props.show ? 'overlay' : 'hide';\n\n    return (\n      <div className={showHideClass}>\n        <section className=\"container\">{this.props.children}</section>\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport './AddBookForm.css';\n\n// have to add requirements - can't rely on HTML required in React it seems\n\nclass AddBookForm extends Component {\n  state = {\n    title: '',\n    author: '',\n    numPages: '',\n    read: true,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.add(this.state);\n    this.setState({\n      title: '',\n      author: '',\n      numPages: '',\n      read: true,\n    });\n    this.props.close();\n  };\n\n  handleCancel = e => {\n    e.preventDefault();\n    this.props.close();\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleReadChange = e => {\n    this.setState(state => {\n      return { read: !state.read };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Add-book\">\n        <h1>Add a Book</h1>\n        <form id=\"new\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            value={this.state.title}\n            required\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"author\"\n            placeholder=\"Author\"\n            value={this.state.author}\n            required\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"number\"\n            name=\"numPages\"\n            placeholder=\"Pages\"\n            value={this.state.numPages}\n            required\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"yep\">\n            <input\n              type=\"checkbox\"\n              name=\"read\"\n              id=\"yep\"\n              checked={this.state.read}\n              onChange={this.handleReadChange}\n            />\n            Read{' '}\n          </label>\n          <fieldset>\n            <button type=\"submit\" onClick={this.handleSubmit}>\n              Submit\n            </button>\n            <button onClick={this.handleCancel} className=\"cancel\">\n              Cancel\n            </button>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddBookForm;\n","import React, { Component } from 'react';\nimport './BookCard.css';\n\nclass BookCard extends Component {\n  handleEx = e => {\n    this.props.remove(this.props.id);\n  };\n\n  handleToggle = e => {\n    this.props.toggle(this.props.id);\n  };\n\n  render() {\n    let readPrint = this.props.read ? (\n      <button className=\"read yep\" onClick={this.handleToggle}>\n        read\n      </button>\n    ) : (\n      <button className=\"read nope\" onClick={this.handleToggle}>\n        unread\n      </button>\n    );\n    return (\n      <div className=\"BookCard\">\n        <button className=\"remove nope\" onClick={this.handleEx}>\n          X\n        </button>\n        <h3>{this.props.title}</h3>\n        <p>by {this.props.author}</p>\n        <p>{this.props.numPages} pages</p>\n        {readPrint}\n      </div>\n    );\n  }\n}\n\nexport default BookCard;\n","import { v4 as uuidv4 } from 'uuid';\n\n// if local library data exists, populate array with books from data\n// else insert placeholder books\nlet lib;\nif (localStorage.getItem('myLibrary')) {\n  lib = JSON.parse(localStorage.getItem('myLibrary'));\n} else {\n  lib = [\n    {\n      title: 'The Hobbit',\n      author: 'J.R.R. Tolkien',\n      numPages: 486,\n      read: true,\n      id: uuidv4(),\n    },\n    {\n      title: 'Chez Panisse Menu Cookbook',\n      author: 'Alice Waters',\n      numPages: 215,\n      read: false,\n      id: uuidv4(),\n    },\n  ];\n}\n\nexport default lib;\n","import React, { Component } from 'react';\nimport Modal from './Modal';\nimport AddBookForm from './AddBookForm';\nimport BookCard from './BookCard';\n\nimport myLibrary from './LibFind';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\n\n// removed Bookshelf because of the addBook/removeBook/toggleRead funcs\n// issues with downstream to the modal/form, and passing funcs two levels\n// there's def a better way to\n// do this once data handling is separated from the components more,\n// have to learn about that\n\n// add in save to localstorage\n\nclass App extends Component {\n  state = {\n    showForm: false,\n    library: [...myLibrary],\n  };\n\n  addBook = book => {\n    const library = this.state.library.concat([\n      {\n        ...book,\n        id: uuidv4(),\n      },\n    ]);\n    this.setState({ library });\n    setTimeout(this.libUpdate, 200);\n  };\n\n  removeBook = id => {\n    for (const [i, book] of this.state.library.entries()) {\n      if (book.id === id) {\n        console.log('matched');\n        const library = this.state.library\n          .slice(0, i)\n          .concat(this.state.library.slice(i + 1));\n        this.setState({ library });\n        break;\n      }\n    }\n    setTimeout(this.libUpdate, 200);\n  };\n\n  toggleRead = id => {\n    this.setState(st => {\n      const library = st.library.map(book => {\n        if (book.id === id) {\n          return { ...book, read: !book.read };\n        } else {\n          return book;\n        }\n      });\n      return { library };\n    });\n    setTimeout(this.libUpdate, 200);\n  };\n\n  libUpdate = () => {\n    localStorage.setItem('myLibrary', JSON.stringify(this.state.library));\n  };\n\n  showModal = () => {\n    this.setState({ showForm: true });\n  };\n\n  hideModal = () => {\n    this.setState({ showForm: false });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Modal show={this.state.showForm}>\n          <AddBookForm add={this.addBook} close={this.hideModal} />\n        </Modal>\n        <header className=\"App-header\">\n          <h1>My Library</h1>\n          <button\n            className=\"btn-primary\"\n            type=\"button\"\n            onClick={this.showModal}\n          >\n            Add Book\n          </button>\n        </header>\n        <div className=\"BookShelf\">\n          {this.state.library.map(book => (\n            <BookCard\n              key={book.id}\n              id={book.id}\n              title={book.title}\n              author={book.author}\n              numPages={book.numPages}\n              read={book.read}\n              remove={this.removeBook}\n              toggle={this.toggleRead}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* <div class=\"container\">\n//       <h1>&nbsp; My Library &nbsp;</h1>\n//       <button id=\"add-book\">Add a Book</button>\n//       <div id=\"book-container\"></div>\n//     </div> */}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}